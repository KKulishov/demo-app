version: '3.7'

networks:
  dl_default:
    external: true

services:    
  frontend:
    build:
      context: $PWD
      dockerfile: .docker/productpage/Dockerfile
    image: registry.sovcombank.group/s-devops/docker.io/istio/examples-bookinfo-productpage-v1:1.17.6
    restart: always
    ports:
      - 9080
    #command: ["tail -f Dockerfile"]
    depends_on:
      - redis
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - VIRTUAL_PORT=9080
      - HOST_REDIS
      - REDIS_PASS
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_HOST
    volumes:
      - "${PWD}/.docker/productpage/productpage.py:/opt/microservices/productpage.py" 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`bookinfo.localhost`) || HostRegexp(`bookinfo.{ip:.*}.nip.io`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=9080"    
      - "traefik.docker.network=dl_default"
    networks:
      dl_default: {}
      default:
        aliases:
          - ${NETWORK_NAME}
  redis:
    image: redis:alpine
    restart: always
    command: "/bin/sh -c 'redis-server --requirepass WDywuquruWySnB' & echo 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' > /etc/rc.local"
    ports:
      - 6379 
  db:
      image: mysql:5.7
      container_name: ${COMPOSE_PROJECT_NAME}_db
      restart: always
      command: ['mysqld', '--character-set-server=utf8', '--collation-server=utf8_unicode_ci']
      environment:
          - MYSQL_DATABASE
          - MYSQL_USER
          - MYSQL_PASSWORD
          - MYSQL_ROOT_PASSWORD
          - LOCALTIME
          - MYSQLD__innodb_flush_log_at_trx_commit
          - MYSQLD__innodb_flush_method
          - MYSQLD__transaction-isolation
          - MYSQLD__sql_mode
          - MYSQLD__character-set-server
          - MYSQLD__collation-server
          - MYSQLD__sort_buffer_size
          - MYSQLD__innodb_buffer_pool_instances
          - MYSQLD__innodb_buffer_pool_size
          - MYSQLD__long_query_time
          - MYSQLD__max_connections
          - MYSQLD__max_heap_table_size
          - MYSQLD__max_user_connections
          - MYSQLD__read_rnd_buffer_size
          - MYSQLD__query_cache_limit
          - MYSQLD__table_open_cache
          - MYSQLD__tmp_table_size
          - MYSQLD__innodb_strict_mode
          - MYSQLD__default-time-zone
          - MYSQLD__default-character-set
          - MYSQLD__default-collation
          - MYSQLD__init_connect
      expose:
        - '3306'
      volumes:
        - "${PWD}/.docker/volume/db:/var/lib/mysql"    
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
    networks:
      dl_default: {}
      default:
        aliases:
          - ${NETWORK_NAME}   
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib:0.52.0
    container_name: opentelemetry-collector
    volumes:
      - "${PWD}/.docker/opentelemetry/config/config.yml:/etc/opentelemetry-collector.yml"
    command:
      - "--config=/etc/opentelemetry-collector.yml"
    depends_on:
      - jaeger  
    networks:
      dl_default: {}
      default:
        aliases:
          - ${NETWORK_NAME}           
  test-app:
    build:
      context: $PWD
      dockerfile: .docker/test-app/Dockerfile
    image: test-app:0.1
    restart: always
    ports:
      - 8080
    environment:
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://opentelemetry-collector:4318/v1/traces"
      OTEL_EXPORTER_OTLP_ENDPOINT: "opentelemetry-collector:4317"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_TRACES_EXPORTER: "otlp_proto_grpc"
      OTEL_SERVICE_NAME: "test-app"
      OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf"
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      DJANGO_SETTINGS_MODULE: "otel_django.settings"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=test-app"
    volumes:
      - "${PWD}/.docker/test-app:/app/lib"  
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.test-app.entrypoints=web"
      - "traefik.http.routers.test-app.rule=Host(`test-app.localhost`) || HostRegexp(`test-app.{ip:.*}.nip.io`)"
      - "traefik.http.services.test-app.loadbalancer.server.port=8080"    
      - "traefik.docker.network=dl_default"
    networks:
      dl_default: {}
      default:
        aliases:
          - ${NETWORK_NAME}  